vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> res;
    sort(nums.begin(), nums.end());  // Sort to simplify duplicate handling and enable two-pointer search

    for (int i = 0; i < nums.size() - 2; ++i) {
        if (i > 0 && nums[i] == nums[i - 1]) continue;  // Skip duplicates for the 'i' element

        int left = i + 1;
        int right = nums.size() - 1;

        while (left < right) {
            int sum = nums[i] + nums[left] + nums[right];
            if (sum == 0) {
                res.push_back({nums[i], nums[left], nums[right]});

                // Skip duplicates for the 'left' element
                while (left < right && nums[left] == nums[left + 1]) left++;
                // Skip duplicates for the 'right' element
                while (left < right && nums[right] == nums[right - 1]) right--;

                left++;
                right--;
            } 
            else if (sum < 0) {
                left++;  // Move left pointer to increase the sum
            } 
            else {
                right--;  // Move right pointer to decrease the sum
            }
        }
    }

    return res;
}
