int binarySearch(vector<int> n, int target, int first, int last)
{
    int ans = -1;
    if (first == last)
    {
        return -1;
    }
    int mid = first + (last - first) / 2;
    if (n[first] == target)
    {
        return first;
    }
    else if (n[last] == target)
    {
        return last;
    }
    else if (n[mid] == target)
    {
        return mid;
    }
    else
    {
        if (target >= n[first + 1] && target <= n[mid - 1])
        {
            ans = binarySearch(n, target, first + 1, mid - 1);
        }
        else if (target >= n[mid + 1] && target <= n[last - 1])
        {
            ans = binarySearch(n, target, mid + 1, last - 1);
        }
    }

    return ans;
}
   
bool checkIfExist(vector<int> arr) {
    sort(arr.begin(), arr.end());
    bool ans{ false };
    for (auto a : arr)
    {
        if (a == 0 && binary_search(arr.begin(), arr.end(), 2 * a)) {
            int b = binarySearch(arr, 0, 0, arr.size()-1);
            if (b - 1 >= 0 && arr[b - 1] == 0) ans = true;
            else if (b + 1 < arr.size() && arr[b + 1] == 0) ans = true;
        }
        else {
            ans = ans | binary_search(arr.begin(), arr.end(), 2 * a);
        }
    }
    return ans;
}
